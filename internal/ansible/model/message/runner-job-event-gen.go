// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package message

import "fmt"
import "encoding/json"

type AnsibleRunnerJobEventYaml struct {
	// Counter corresponds to the JSON schema field "counter".
	Counter int `json:"counter"`

	// Created corresponds to the JSON schema field "created".
	Created *string `json:"created,omitempty"`

	// EndLine corresponds to the JSON schema field "end_line".
	EndLine int `json:"end_line"`

	// Event corresponds to the JSON schema field "event".
	Event string `json:"event"`

	// EventData corresponds to the JSON schema field "event_data".
	EventData *AnsibleRunnerJobEventYamlEventData `json:"event_data,omitempty"`

	// RunnerIdent corresponds to the JSON schema field "runner_ident".
	RunnerIdent *string `json:"runner_ident,omitempty"`

	// StartLine corresponds to the JSON schema field "start_line".
	StartLine int `json:"start_line"`

	// Stderr corresponds to the JSON schema field "stderr".
	Stderr interface{} `json:"stderr,omitempty"`

	// Stdout corresponds to the JSON schema field "stdout".
	Stdout interface{} `json:"stdout,omitempty"`

	// Uuid corresponds to the JSON schema field "uuid".
	Uuid string `json:"uuid"`
}

type AnsibleRunnerJobEventYamlEventData struct {
	// Changed corresponds to the JSON schema field "changed".
	Changed AnsibleRunnerJobEventYamlEventDataChanged `json:"changed,omitempty"`

	// CrcDispatcherCorrelationId corresponds to the JSON schema field
	// "crc_dispatcher_correlation_id".
	CrcDispatcherCorrelationId *string `json:"crc_dispatcher_correlation_id,omitempty"`

	// CrcDispatcherErrorCode corresponds to the JSON schema field
	// "crc_dispatcher_error_code".
	CrcDispatcherErrorCode *string `json:"crc_dispatcher_error_code,omitempty"`

	// CrcDispatcherErrorDetails corresponds to the JSON schema field
	// "crc_dispatcher_error_details".
	CrcDispatcherErrorDetails *string `json:"crc_dispatcher_error_details,omitempty"`

	// Failures corresponds to the JSON schema field "failures".
	Failures AnsibleRunnerJobEventYamlEventDataFailures `json:"failures,omitempty"`

	// Host corresponds to the JSON schema field "host".
	Host *string `json:"host,omitempty"`

	// Ignored corresponds to the JSON schema field "ignored".
	Ignored AnsibleRunnerJobEventYamlEventDataIgnored `json:"ignored,omitempty"`

	// IsConditional corresponds to the JSON schema field "is_conditional".
	IsConditional *bool `json:"is_conditional,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Ok corresponds to the JSON schema field "ok".
	Ok AnsibleRunnerJobEventYamlEventDataOk `json:"ok,omitempty"`

	// Play corresponds to the JSON schema field "play".
	Play *string `json:"play,omitempty"`

	// PlayUuid corresponds to the JSON schema field "play_uuid".
	PlayUuid *string `json:"play_uuid,omitempty"`

	// Playbook corresponds to the JSON schema field "playbook".
	Playbook *string `json:"playbook,omitempty"`

	// PlaybookUuid corresponds to the JSON schema field "playbook_uuid".
	PlaybookUuid *string `json:"playbook_uuid,omitempty"`

	// Res corresponds to the JSON schema field "res".
	Res *AnsibleRunnerJobEventYamlEventDataRes `json:"res,omitempty"`

	// Skipped corresponds to the JSON schema field "skipped".
	Skipped AnsibleRunnerJobEventYamlEventDataSkipped `json:"skipped,omitempty"`

	// Task corresponds to the JSON schema field "task".
	Task *string `json:"task,omitempty"`

	// TaskAction corresponds to the JSON schema field "task_action".
	TaskAction *string `json:"task_action,omitempty"`

	// TaskArgs corresponds to the JSON schema field "task_args".
	TaskArgs *string `json:"task_args,omitempty"`

	// TaskPath corresponds to the JSON schema field "task_path".
	TaskPath *string `json:"task_path,omitempty"`

	// TaskUuid corresponds to the JSON schema field "task_uuid".
	TaskUuid *string `json:"task_uuid,omitempty"`

	// Uuid corresponds to the JSON schema field "uuid".
	Uuid *string `json:"uuid,omitempty"`
}

type AnsibleRunnerJobEventYamlEventDataChanged map[string]interface{}

type AnsibleRunnerJobEventYamlEventDataFailures map[string]interface{}

type AnsibleRunnerJobEventYamlEventDataIgnored map[string]interface{}

type AnsibleRunnerJobEventYamlEventDataOk map[string]interface{}

type AnsibleRunnerJobEventYamlEventDataRes struct {
	// AnsibleNoLog corresponds to the JSON schema field "_ansible_no_log".
	AnsibleNoLog *bool `json:"_ansible_no_log,omitempty"`

	// Changed corresponds to the JSON schema field "changed".
	Changed *bool `json:"changed,omitempty"`
}

type AnsibleRunnerJobEventYamlEventDataSkipped map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AnsibleRunnerJobEventYaml) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["counter"]; !ok || v == nil {
		return fmt.Errorf("field counter: required")
	}
	if v, ok := raw["end_line"]; !ok || v == nil {
		return fmt.Errorf("field end_line: required")
	}
	if v, ok := raw["event"]; !ok || v == nil {
		return fmt.Errorf("field event: required")
	}
	if v, ok := raw["start_line"]; !ok || v == nil {
		return fmt.Errorf("field start_line: required")
	}
	if v, ok := raw["uuid"]; !ok || v == nil {
		return fmt.Errorf("field uuid: required")
	}
	type Plain AnsibleRunnerJobEventYaml
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AnsibleRunnerJobEventYaml(plain)
	return nil
}
