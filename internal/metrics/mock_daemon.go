// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-flotta/flotta-device-worker/internal/metrics (interfaces: MetricsDaemon)

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricsDaemon is a mock of MetricsDaemon interface.
type MockMetricsDaemon struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsDaemonMockRecorder
}

// MockMetricsDaemonMockRecorder is the mock recorder for MockMetricsDaemon.
type MockMetricsDaemonMockRecorder struct {
	mock *MockMetricsDaemon
}

// NewMockMetricsDaemon creates a new mock instance.
func NewMockMetricsDaemon(ctrl *gomock.Controller) *MockMetricsDaemon {
	mock := &MockMetricsDaemon{ctrl: ctrl}
	mock.recorder = &MockMetricsDaemonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsDaemon) EXPECT() *MockMetricsDaemonMockRecorder {
	return m.recorder
}

// AddTarget mocks base method.
func (m *MockMetricsDaemon) AddTarget(arg0 string, arg1 Scrapers, arg2 time.Duration, arg3 SampleFilter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTarget", arg0, arg1, arg2, arg3)
}

// AddTarget indicates an expected call of AddTarget.
func (mr *MockMetricsDaemonMockRecorder) AddTarget(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTarget", reflect.TypeOf((*MockMetricsDaemon)(nil).AddTarget), arg0, arg1, arg2, arg3)
}

// DeleteTarget mocks base method.
func (m *MockMetricsDaemon) DeleteTarget(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTarget", arg0)
}

// DeleteTarget indicates an expected call of DeleteTarget.
func (mr *MockMetricsDaemonMockRecorder) DeleteTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTarget", reflect.TypeOf((*MockMetricsDaemon)(nil).DeleteTarget), arg0)
}

// Start mocks base method.
func (m *MockMetricsDaemon) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockMetricsDaemonMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMetricsDaemon)(nil).Start))
}
