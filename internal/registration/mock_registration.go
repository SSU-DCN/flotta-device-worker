// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-flotta/flotta-device-worker/internal/registration (interfaces: RegistrationWrapper)

// Package registration is a generated GoMock package.
package registration

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistrationWrapper is a mock of RegistrationWrapper interface.
type MockRegistrationWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationWrapperMockRecorder
}

// MockRegistrationWrapperMockRecorder is the mock recorder for MockRegistrationWrapper.
type MockRegistrationWrapperMockRecorder struct {
	mock *MockRegistrationWrapper
}

// NewMockRegistrationWrapper creates a new mock instance.
func NewMockRegistrationWrapper(ctrl *gomock.Controller) *MockRegistrationWrapper {
	mock := &MockRegistrationWrapper{ctrl: ctrl}
	mock.recorder = &MockRegistrationWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationWrapper) EXPECT() *MockRegistrationWrapperMockRecorder {
	return m.recorder
}

// RegisterDevice mocks base method.
func (m *MockRegistrationWrapper) RegisterDevice() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterDevice")
}

// RegisterDevice indicates an expected call of RegisterDevice.
func (mr *MockRegistrationWrapperMockRecorder) RegisterDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDevice", reflect.TypeOf((*MockRegistrationWrapper)(nil).RegisterDevice))
}
