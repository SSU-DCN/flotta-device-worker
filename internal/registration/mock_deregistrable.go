// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-flotta/flotta-device-worker/internal/registration (interfaces: Deregistrable)

// Package registration is a generated GoMock package.
package registration

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeregistrable is a mock of Deregistrable interface.
type MockDeregistrable struct {
	ctrl     *gomock.Controller
	recorder *MockDeregistrableMockRecorder
}

// MockDeregistrableMockRecorder is the mock recorder for MockDeregistrable.
type MockDeregistrableMockRecorder struct {
	mock *MockDeregistrable
}

// NewMockDeregistrable creates a new mock instance.
func NewMockDeregistrable(ctrl *gomock.Controller) *MockDeregistrable {
	mock := &MockDeregistrable{ctrl: ctrl}
	mock.recorder = &MockDeregistrableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeregistrable) EXPECT() *MockDeregistrableMockRecorder {
	return m.recorder
}

// Deregister mocks base method.
func (m *MockDeregistrable) Deregister() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deregister")
	ret0, _ := ret[0].(error)
	return ret0
}

// Deregister indicates an expected call of Deregister.
func (mr *MockDeregistrableMockRecorder) Deregister() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deregister", reflect.TypeOf((*MockDeregistrable)(nil).Deregister))
}

// String mocks base method.
func (m *MockDeregistrable) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockDeregistrableMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDeregistrable)(nil).String))
}
